
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>SelectFlightPage</title>
    <link href="~/Content/layui/css/layui.css" rel="stylesheet" />
    <!--bootstrap 框架样式表-->
    <link href="~/Content/bootstrap-4.1.3-dist/css/bootstrap.min.css" rel="stylesheet" />
    <!--后台模板中的字体图标css样式-->
    <link href="~/Content/app-assets/fonts/simple-line-icons/style.css" rel="stylesheet" />
    <style>
        /* 各个航段 标题部分上线边框 */
        .segmentTitle {
            padding: 5px 0;
            border-top: 2px solid black;
            border-bottom: 2px solid black;
            font-size: 22px;
        }

        /* 各个航段 标题部分 按钮样式 */
        .btn-collapse-t {
            padding: 2px 10px;
            background: transparent;
            font-size: 20px;
            border: 0;
        }

            /* 各个航段 标题部分 按钮去除获得焦点时的蓝色边框 */
            .btn-collapse-t.focus,
            .btn-collapse-t:focus {
                outline: 0;
                box-shadow: none;
            }

        /* 航班舱位 等级 座位 价格显示 */
        .flightCabinItem {
            display: inline-block;
            width: 120px;
        }

        /* 让layui单元格多出的部分自动换行 */
        .layui-table-cell {
            font-size: 14px;
            padding: 0 5px;
            height: auto;
            overflow: visible;
            text-overflow: inherit;
            white-space: normal;
            word-break: break-all;
        }

        .layui-table-view {
            margin: 0;
        }
       div{
            font-family: "华文彩云";
        }
        h4{
            font-family: "华文彩云";
        }
        h5{
            font-family: "华文彩云";
        }
        p{
            font-family: "华文彩云";
        }
         label{
            font-family: "华文彩云";
        }
        input{
            font-family: "华文彩云";
        }
        tr{
            font-family: "华文彩云";
        }
        td{
            font-family: "华文彩云";
        }
        th{
            font-family: "华文彩云";
        }
        b{
            font-family: "华文彩云";
        }
        button{
            font-family: "华文彩云";
        }
        a{
            font-family: "华文彩云";
        }
        h2{
            font-family: "华文彩云";
        }
        dd{
            font-family: "华文彩云";
        }
        span{
            font-family: "华文彩云";
        }
        select{
            font-family: "华文彩云";
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="row mt-4">
            <div class="col-12 text-center">
                <h2 id="h2Title">选择航班</h2>
            </div>
        </div>
        @*存放各个航段数据的容器*@
        <div class="accordion border-bottom" id="accordionSegment">

        </div>
        @*变更信息回填*@
        <div class="row mt-4 justify-content-center d-none" id="DivInvoluntaryUpdate">
            <label class="col-2 col-form-label text-right">变更原因 ：</label>
            <input type="text" class="form-control col-4" id="changeReason" />
        </div>
        @*人数信息*@
        <div class="row mt-4 justify-content-center d-none" id="divPassengerNum">
            <label class="col-2 col-lg-1 col-form-label">人数：</label>
            <div class="col-3 col-lg-2">
                <input type="number" class="form-control" max="9" min="1" step="1" value="1" id="passengerNum" />
            </div>
            <div class="col-2 col-lg-1" id="divRetun">
                <button type="button" class="btn btn-block btn-primary" id="btnAddSegment">返回</button>
            </div>
            <div class="col-2 col-lg-1" id="divAppointment">
                <button type="button" class="btn btn-block btn-primary" id="btnAppointment">预订</button>
            </div>
            @* 为PNR添加航段准备的按钮 *@
            <div class="col-2 col-lg-1 d-none" id="divAddSegment">
                <button type="button" class="btn btn-block btn-primary" id="btnAddSegment">添加</button>
            </div>
            @* 为PNR添加航段准备的按钮 *@            
            @* 为ET航段准备的按钮 *@
            <div class="col-2 col-lg-1 d-none" id="divAddET">
                <button type="button" class="btn btn-block btn-primary" id="btnAddSegment">更改</button>
            </div>
            @* 为PET航段准备的按钮 *@
        </div>
    </div>

    @* 航段选择模板 *@
    <div class="card d-none" id="segmentCardT">
        <div class="card-header pt-0 pb-0">
            <div class="row">
                <div class="col-12 p-0">
                    <button id="btnCollapseT" class="btn btn-block btn-collapse-t" type="button" data-toggle="collapse" data-target="#segmentCollapseT">
                        <div class="row segmentTitle justify-content-between">
                            <div class="col-1 text-left">
                                <p><i class="icon-plane">&nbsp;</i><b data-id="title">单程</b></p>
                            </div>
                            <div class="col-1"></div>
                            <div class="col-10 col-md-4 col-lg-4">
                                <b>航线：</b><span id="line-ow" data-id="site">广州——北京</span>
                            </div>
                            <div class="col-12 col-md-4 col-lg-4 text-right">
                                @* <i class="icon-list"></i> *@
                                <b>日期：</b> <span id="date-ow" data-id="date">2019-12-10</span>
                            </div>
                        </div>
                    </button>
                </div>
            </div>
        </div>
        <div id="segmentCollapseT" class="collapse" data-parent="#accordionSegment">
            <div class="card-body p-0">
                <table lay-filter="tableFlightT" id="tableFlightT">
                    <thead>
                        <tr>
                            <th lay-data="{field:'index',align:'center', width:40}">序号</th>
                            <th lay-data="{field:'flightCode',align:'center', width:80}">航班号</th>
                            <th lay-data="{field:'flighrSite',align:'center', width:160}">始发地 - 目的地</th>
                            <th lay-data="{field:'flightTime',align:'center', width:120}">起飞 - 到达</th>
                            <th lay-data="{field:'planType',align:'center', width:80}">机型</th>
                            <th lay-data="{field:'seatInfo'}">座位/座位数/价格(人民币)</th>
                        </tr>
                    </thead>
                    <tbody data-id="tbodyFlight">
                        @* 行数据模板 *@
                        @*<tr>
                             <td>1</td> 
                             <td>MU5317</td> 
                             <td>乌鲁木齐 到 齐齐哈尔</td>
                             <td>10:00 - 12:20</td>
                             <td>A380</td>
                             <td> 
                                 <div class="flightCabinItem"><input type="radio" name="cabin" value="1" title="F>9 ￥1790"></div>
                                 <div class="flightCabinItem"><input type="radio" name="cabin" value="1" title="F>9 ￥1790"></div>
                                 <div class="flightCabinItem"><input type="radio" name="cabin" value="1" title="F>9 ￥1790"></div>
                                 <div class="flightCabinItem"><input type="radio" name="cabin" value="1" title="F>9 ￥1790"></div>
                                 <div class="flightCabinItem"><input type="radio" name="cabin" value="1" title="F>9 ￥1790"></div>
                                 <div class="flightCabinItem"><input type="radio" name="cabin" value="1" title="F=7 ￥1790"></div>
                             </td> 
                        </tr>*@ 
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <script src="~/Content/app-assets/vendors/js/core/jquery-3.3.1.min.js"></script>
    <script src="~/Content/bootstrap-4.1.3-dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/Content/layui/layui.js"></script>
    <script src="~/Content/js/customfunction.js"></script>
    <script>
         var layer, layuiTable;
         var airportAndDate;
         //PNR复制声明变量
         var isCopy = false;
         var passengerInfors;
         var passengerNum;
         var PNRID;
         var flightList;
         var changeData;
         $(function () {
             //===========================PNR复制
             //获取CopyPNR页面保存的sessionStorage数据
             var pnrCopy = sessionStorage.getItem("copyPNR");
             //获取CopyPNR页面保存的sessionStorage数据，parse转换成JSON对象，stringify转换成JSON字符串
             passengerInfors = JSON.parse(sessionStorage.getItem("passengerInfors"));
             //console.log(passengerInfors.length)
             if (pnrCopy != null && pnrCopy == "true") {
                 isCopy = true;
                 $("#passengerNum").val(passengerInfors.length);
                 $("#passengerNum").prop("min", passengerInfors.length);
             }
            
             //=============================PNR添加航段
             //获取该航段的标志
             var addSegment = sessionStorage.getItem("addSegment");
             //获取该航段的人数
             passengerNum = sessionStorage.getItem("addSegment_pnrPassengerNum");
             //判断是否是添加航段的标志
             //获取PNRID
             PNRID = sessionStorage.getItem("addSegment_PNRID");
             if (addSegment != null && addSegment == "true") {
                 //修改标题
                 $("#h2Title").text("添加航段-选择航班");
                 //显示“添加”按钮
                 $("#divAddSegment").removeClass("d-none");
                 //隐藏“预订”按钮
                 $("#divAppointment").addClass("d-none");
                 //设置人数input标签的值等于航段人数和只读状态，
                 $("#passengerNum").val(passengerNum).prop("readonly", "readonly");
                 sessionStorage.removeItem("addSegment");
             }
             //===================ET航班更改
             var ETChangeFlight = sessionStorage.getItem("ETChangeFlight");
             changeData = JSON.parse(sessionStorage.getItem("changeData"));
             //console.log(changeData);
             if (ETChangeFlight != null && ETChangeFlight == "true") {
                 //修改标题
                 $("#h2Title").text("ET航班更改-选择航班");
                 $("#divAddET").removeClass("d-none");
                 //隐藏“预订”按钮
                 $("#divAppointment").addClass("d-none");
                 //隐藏“添加”按钮
                 $("#divAddSegment").addClass("d-none");
                 //设置人数
                 $("#passengerNum").val(1).attr("readonly", "readonly");
                 //显示更改原因部分
                 $("#DivInvoluntaryUpdate").removeClass("d-none");
                 sessionStorage.removeItem("ETChangeFlight");
             }




            //加载layui的模块
            layui.use(['layer', 'table'], function () {
                layer = layui.layer;
                layuiTable = layui.table;
                //取出上一页通过sessionStorage传递的数据
                var strAirportAndDate = sessionStorage.getItem("airportAndDate");//获取airportAndDate
                //将字符串转成对象parse,将对象转成字符串stringify
                airportAndDate = JSON.parse(strAirportAndDate);
                //打开加载层
                //console.log(airportAndDate);
                var layerIndex = layer.load();
                $.post("@Url.Content("~/PNR/PNRAppointment/SelectFlight")",
                    airportAndDate,
                    function (jsonData) {
                        //获取出页面用于显示的容器
                        //console.log(jsonData);
                        var accordionSegment = $("#accordionSegment");
                        //获取出航段信息的显示模板
                        var segmentCardT = $("#segmentCardT");
                        
                        if (jsonData != null && jsonData.length > 0) {
                            for (var i = 0; i < jsonData.length; i++) {
                                //获取出当前航段数据
                                segmentData = jsonData[i];

                                //==1-复制/克隆一份模板
                                var segmentCard = segmentCardT.clone();

                                //==2-去除模板上的d-none类
                                segmentCard.removeClass("d-none");

                                //==3-修改模板上的各种ID
                                //修改复制出来的模块ID，因为是动态生成不固定ID值，但是ID值等于当前的数据的值，使得模块不重复显示
                                segmentCard.prop("id", "segmentCard" + i);//模板ID
                                //查询出模块中ID为segmentCollapseT的div该div是详细数据div修改ID，并动态生成更多且不重复的div，当前i的值和当前模块i相同
                                segmentCard.find("#segmentCollapseT").prop("id", "segmentCollapse" + i);//Collapse的ID
                                //查询出模块中id为btnCollapseT的按钮标签，并赋值给btnCollapse
                                var btnCollapse = segmentCard.find("#btnCollapseT");
                                //改变赋值后的按钮标签中的ID，i的值和当前div的i和当前模块的i值相同
                                btnCollapse.prop("id", "btnCollapse" + i);
                                //
                                btnCollapse.attr("data-target", "#segmentCollapse" + i);
                                //btnCollapse.data("target", "#segmentCollapse" + i);
                                segmentCard.find("#tableFlightT").prop("id", "tableFlight" + i);
                                segmentCard.find("#tableFlight" + i).attr("lay-filter", "tableFlight" + i);//各个航段候选航班表格 的 lay-filter属性

                                if (i === 0) {//第一个模块默认显示详细数据
                                    segmentCard.find("#segmentCollapse" + i).addClass("show");
                                }
                                //==5处理航段号显示 
                                //查询出模块中为b标签里的属性data-id="tilie"属性，并赋值给segmentTitle
                                var segmentTitle = segmentCard.find('b[data-id="title"]');
                                //airportAndDate是在数据库查询出的数据的变量，flightType是airportAndDate的值，如果是单程flightType就是1，往返程就是2，联程就是=>3
                                if (airportAndDate.flightType == 2) {//往返程
                                    if (i === 0) {
                                        segmentTitle.text("航段：往")
                                    }
                                    if (i === 1) {
                                        segmentTitle.text("航段：反")
                                    }
                                } else if (airportAndDate.flightType == 3) {//联程                                    
                                    segmentTitle.text("航段:" + (i + 1));
                                } else {

                                }
                                //==6-航线和日期
                                //航线
                                //segmentData是jsonData遍历后得出来的新变量.orangeCityName起飞城市名+拼接字符串+segmentData.降落城市名
                                var strSite = segmentData.orangeCityName + '--' + segmentData.destinationCityName;
                                //查找模块中的span标签中的data-id="site"属性，用来动态显示航线
                                segmentCard.find('span[data-id="site"]').text(strSite);
                                //查找模块中的span标签中的data-id="site"属性，用来动态显示航线
                                segmentCard.find('span[data-id="date"]').text(segmentData.strDate);
                                //console.log(segmentData);//打印出航段所有数据

                                //==7-绑定航段table
                                //表格行数据的容器
                                var tbody = segmentCard.find('[data-id="tbodyFlight"]');
                                //表格的数据
                                flightList = segmentData.flightList;
                                for (var j = 0; j < flightList.length; j++) {
                                    //当前行的容器
                                    var tr = $(document.createElement("tr"));

                                    //7.1-序号列
                                    tr.append('<td>' + (j + 1) + '</td>');
                                    //7.2-航班号 tr.append( '<td>'++'</td>')
                                    tr.append('<td>' + flightList[j].flightCode + '</td>')
                                    //7.3-始发地 - 目的地
                                    tr.append('<td>' + flightList[j].orangeCityName + " 到 " +
                                        flightList[j].destinationCityName + '</td>')
                                    //7.4-时间 起飞 - 到达
                                    tr.append("<td>" + flightTimeToStr(flightList[j].departureTime, flightList[j].arrivalTime) + "</td>");
                                    //7.5-机型
                                    tr.append('<td>' + flightList[j].planTypeName + '</td>')
                                    //7.6-座位/座位数/价格(人民币)
                                    var td6 = $(document.createElement("td"));//创建td
                                    var flightCabins = flightList[j].flightCabins;//获取出航班信息中的舱位信息list 
                                    //将航班时间和日期拼接，用于后续多航段时间判断
                                    var startEndDate = timeObjToDateTimeStr(jsonData[i].strDate, flightList[j].departureTime, flightList[j].arrivalTime);
                                    //遍历舱位信息list 生成舱位信息
                                    for (var k = 0; k < flightCabins.length; k++) {
                                        var cabinName = "cabin" + i;//同一航段的使用同一name，保证同一个航段只能选择一个
                                        var cabinTitle = flightCabins[k].cabinTypeCode;//舱位等级编号
                                        //舱位剩余座位数 大于9显示 >9;否则显示具体的剩余座位数
                                        //剩余座位数 = 舱位座位数-售出座位数
                                        if ((flightCabins[k].seatNum - flightCabins[k].sellSeatNum) > 9) {
                                            cabinTitle += ">9";
                                        } else {
                                            cabinTitle += "=" + (flightCabins[k].seatNum - flightCabins[k].sellSeatNum);
                                        }
                                        //价格
                                        cabinTitle += " ￥" + flightCabins[k].cabinPrice;
                                        //拼接舱位价格信息，动态显示出td表格//data属性是将所需要的数据保存到input标签里方便以后需要用
                                        td6.append('<div class="flightCabinItem"><input type="radio" name="' + cabinName +
                                            '" value="1" data-flight-id="' + flightCabins[k].flightID +
                                            '" data-flight-cabin-id="' + flightCabins[k].flightCabinID +
                                            '" data-start-end-date="' + startEndDate +
                                            '" data-seat-num="' + (flightCabins[k].seatNum - flightCabins[k].sellSeatNum) +
                                            '" title="' + cabinTitle +
                                            '"></div>');

                                            //<td>1</td> 
                                            //<td>MU5317</td> 
                                            //<td>乌鲁木齐 到 齐齐哈尔</td>
                                            //<td>10:00 - 12:20</td>
                                            //<td>A380</td>
                                            //<td> 
                                            //     <div class="flightCabinItem"><input type="radio" name="cabin" value="1" title="F>9 ￥1790"></div>
                                            //     <div class="flightCabinItem"><input type="radio" name="cabin" value="1" title="F>9 ￥1790"></div>
                                            //     <div class="flightCabinItem"><input type="radio" name="cabin" value="1" title="F>9 ￥1790"></div>
                                            //     <div class="flightCabinItem"><input type="radio" name="cabin" value="1" title="F>9 ￥1790"></div>
                                            //     <div class="flightCabinItem"><input type="radio" name="cabin" value="1" title="F>9 ￥1790"></div>
                                            //     <div class="flightCabinItem"><input type="radio" name="cabin" value="1" title="F=7 ￥1790"></div>
                                            // </td> 
                                    }
                                    //把td添加到tr
                                    tr.append(td6);

                                    //包tr添加tbody
                                    tbody.append(tr);
                                }

                                //=把segmentCard添加到外部的容器元素
                                accordionSegment.append(segmentCard);

                                //转换静态表格
                                var tableFlightId = "tableFlight" + i;
                                layuiTable.init(tableFlightId);
                            }
                            //显示出元素的输入框和预定按钮
                            $("#divPassengerNum").removeClass("d-none");
                        } else {
                            accordionSegment.append('<p>没有查询到数据</p>');
                        }
                        //关闭加载层
                        layer.close(layerIndex);
                    }
                );
            });
        });



        //预定按钮点击事件
        $("#btnAppointment").click(function () {
            //变量 存放数据
            var flightCabinIDs = [];//存放用户选择的航班舱位ID (后续可以根据航班舱位ID查询出用户选择的航班 舱位等信息)
            var startEndDates = [];//存放用户选择的航班起飞降落时间 (为了数据验证)
            var seatNums = [];//存放用户选择的航班舱位的剩余座位数(为了数据验证)

            //遍历各个航段,获取用户选择的数据
            for (var i = 0; i < airportAndDate.segmentNum; i++) {               
                //获取用户选择的航班舱位,由代码生成的动态表格
                var checkedCabins = $('[name="cabin' + i + '"]:checked');
                if (checkedCabins.length == 0) {
                    //获取航段标题
                    var title = $('#segmentCard' + i + ' b[data-id="title"]').text();
                    myAlert("请选择[" + title + "]的航班舱位", "提示", 0);
                    return;
                }
                //获取用户选择的舱位id，由代码生成的动态表格
                flightCabinIDs.push(checkedCabins.eq(0).data("flight-cabin-id"));
                //获取用户选择航班的起飞和降落时间(用于验证数据)，由代码生成的动态表格
                startEndDates.push(checkedCabins.eq(0).data("start-end-date"));
                //获取用户选择航班舱位的剩余座位数，由代码生成的动态表格
                seatNums.push(checkedCabins.eq(0).data("seat-num"));                
            }
            //console.log(flightCabinIDs);
            //console.log(startEndDates);
            //console.log(seatNums);

            //==数据验证-航班的起飞日期是否合适 
            //下一个航段航班的起飞时间需要大于上一航段航班降落时间60分钟
            if (airportAndDate.segmentNum > 1) {
                //第二个航段开始循环,因为第一个什么时候起飞都没关系，重要的是第二个开始要确保第一航段降落时间小于第二航段起飞时间
                for (var i = 1; i < airportAndDate.segmentNum; i++) {//i=0，就是从第一个开始循环，i=1就是从第二个开始循环用户选择的航段
                    //分割上一个航段的起飞降落时间，一般都是第一个航段先开始，从第二个航段开始循环，那么第二个的上一个就是第一个
                    var strStartEndDatesOld = startEndDates[i - 1].split(";");//分割startEndDate获取到起飞时间和降落时间的字符串，i-1就是获取上一个，split分离的意思根据()里的内容进行分割
                    var dtStartOld = new Date(strStartEndDatesOld[0]);//上一航段 起飞时间，strStartEndDatesOld[0]是分割的第一部分
                    var dtEndOld = new Date(strStartEndDatesOld[1]);//上一航段 降落时间，strStartEndDatesOld[1]是分割的第二部分

                    //分割当前航段的起飞降落时间
                    var strStartEndDatesNow = startEndDates[i].split(';');//分割startEndDate获取到起飞时间和降落时间的字符串，i-1就是获取上一个，split分离的意思根据()里的内容进行分割
                    var dtStartNow = new Date(strStartEndDatesNow[0]);//当前航段 起飞时间，strStartEndDatesOld[0]是分割的第一部分
                    var dtEndNow = new Date(strStartEndDatesNow[1]);//当前航段 降落时间，strStartEndDatesOld[1]是分割的第二部分

                    //当前航段的起飞时间 晚于 上一航段降落时间至少60分钟
                    dtEndOld.setMinutes(dtEndOld.getMinutes() + 60);//把上一航段的降落时间加60分钟在进行和下一个航段的起飞时间进行对比
                    //如果当前航段的起飞时间 不晚于 上一航段降落时间至少60分钟,提示用户
                    if (!(dtStartNow.getTime() > dtEndOld.getTime())) {//用上一段的降落时间dtEndOld和当前段的起飞时间进行对比（上一段降落时间增加了60分钟）
                        //获取两个不满足要求航段的名称 (用于提示用户)
                        var titleOld = $('#segmentCard' + (i - 1) + ' b[data-id="title"]').text();//获取复制出来的模板#segmentCard' + (i - 1)（i-1是因为循环是从第二个开始），上一段航班
                        var titleNow = $('#segmentCard' + i + ' b[data-id="title"]').text();//当前航班的航段

                        myAlert("【" + titleNow + "】的起飞时间需要大于【" + titleOld + "】降落时间60分钟,请重新选择", "提示", 0);
                        return;
                    }
                }
            }
            //==数据验证  用户输入的旅客人数 [1-9]
            var passengerNum = $('#passengerNum').val();
            if (!(/^[1-9]{1}$/.test(passengerNum))) {
                myAlert("旅客人数只能是1到9的整数,请重新输入", "提示", 0);
                return;
            }
            //=================PNR复制部分===============
            if (isCopy) {
                if (passengerNum < passengerInfors.length) {
                    layer.alert("订票人数不能小于复制旅客人数！");
                    return;
                }
            }
            
            for (var i = 0; i <seatNums.length; i++) {
                if (parseInt(passengerNum) > parseInt(seatNums[i])) {
                    myAlert("第" + (i + 1) + "个航段的所选航班舱位剩余座位数不足，请重新选择")
                    return;
                }
            }


            //保存数据到sessionStorage
            var flightCabinAndPassengerNum = {
                flightCabinIDs: flightCabinIDs,//选择的航班舱位ID 数组
                passengerNum:parseInt(passengerNum)//旅客数
            }
            sessionStorage.setItem("flightCabinAndPassengerNum", JSON.stringify(flightCabinAndPassengerNum));//

            //传递数据到下一个页面
            //传递数据到下一页面 (get请求传数据组)
            var strUrl = "@Url.Content("~/PNR/PNRAppointment/EnterInfoPage?")";
            //把航班舱位ID数组拼接到url上
            for (var i = 0; i < flightCabinIDs.length; i++) {
                strUrl += "flightCabinIDs=" + flightCabinIDs[i] + "&";
            }
            //拼接旅客人数
            strUrl += "passengerNum=" + passengerNum;

            window.location.href = strUrl;
        });

        //console.log(flightList);
        //==========================PNR添加航段
        //添加按钮点击事件
        $("#divAddSegment").click(function () {
            //变量 存放数据
            var flightCabinIDs = [];//存放用户选择的航班舱位ID (后续可以根据航班舱位ID查询出用户选择的航班 舱位等信息)
            var startEndDates = [];//存放用户选择的航班起飞降落时间 (为了数据验证)
            var seatNums = [];//存放用户选择的航班舱位的剩余座位数(为了数据验证)            
            //循环舱位
            for (var i = 0; i < airportAndDate.segmentNum; i++) {                
                //获取用户选择的航班舱位
                var checkedCabins = $('[name="cabin' + i + '"]:checked');
                //判断用户是否选择舱位
                if (checkedCabins.length == 0) {
                    //获取航段标题
                    var title = $('#segmentCard' + i + ' b[data-id="title"]').text();
                    //提示用户
                    myAlert("请选择[" + title + "]的航班舱位", "提示", 0);
                    return;
                }
                //获取数据
                //把获取到的航班舱位数据的第一条里的data属性的值，添加给数组容器
                flightCabinIDs.push(checkedCabins.eq(0).data("flight-cabin-id"));
                startEndDates.push(checkedCabins.eq(0).data("start-end-date"));
                seatNums.push(checkedCabins.eq(0).data("seat-num"));
            }
            //==数据验证-航班的起飞日期是否合适
            //下一个航段的起飞事件需要大于上一段航班的降落时间60分钟
            if (airportAndDate.seatNum > 1) {               
                //第二个航段开始循环,因为第一个什么时候起飞都没关系，重要的是第二个开始要确保第一航段降落时间小于第二航段起飞时间
                for (var i = 1; i < airportAndDate.segmentNum; i++) {//i=0，就是从第一个开始循环，i=1就是从第二个开始循环用户选择的航段                    
                    //分割上一个航段的起飞降落时间，一般都是第一个航段先开始，从第二个航段开始循环，那么第二个的上一个就是第一个
                    var strStartEndDatesOld = startEndDates[i - 1].split(";");//分割startEndDate获取到起飞时间和降落时间的字符串，i-1就是获取上一个，split分离的意思根据()里的内容进行分割
                    var dtStartOld = new Date(strStartEndDatesOld[0]);//上一航段 起飞时间，strStartEndDatesOld[0]是分割的第一部分
                    var dtEndOld = new Date(strStartEndDatesOld[1]);//上一航段 降落时间，strStartEndDatesOld[1]是分割的第二部分

                    //分割当前航段的起飞降落时间
                    var strStartEndDatesNow = startEndDates[i].split(';');//分割startEndDate获取到起飞时间和降落时间的字符串，i-1就是获取上一个，split分离的意思根据()里的内容进行分割
                    var dtStartNow = new Date(strStartEndDatesNow[0]);//当前航段 起飞时间，strStartEndDatesOld[0]是分割的第一部分
                    var dtEndNow = new Date(strStartEndDatesNow[1]);//当前航段 降落时间，strStartEndDatesOld[1]是分割的第二部分

                    //当前航段的起飞时间 晚于 上一航段降落时间至少60分钟
                    dtEndOld.setMinutes(dtEndOld.getMinutes() + 60);//把上一航段的降落时间加60分钟在进行和下一个航段的起飞时间进行对比
                    //如果当前航段的起飞时间 不晚于 上一航段降落时间至少60分钟,提示用户
                    if (!(dtStartNow.getTime() > dtEndOld.getTime())) {//用上一段的降落时间dtEndOld和当前段的起飞时间进行对比（上一段降落时间增加了60分钟）
                        //获取两个不满足要求航段的名称 (用于提示用户)
                        var titleOld = $('#segmentCard' + (i - 1) + ' b[data-id="title"]').text();//获取复制出来的模板#segmentCard' + (i - 1)（i-1是因为循环是从第二个开始），上一段航班
                        var titleNow = $('#segmentCard' + i + ' b[data-id="title"]').text();//当前航班的航段

                        myAlert("【" + titleNow + "】的起飞时间需要大于【" + titleOld + "】降落时间60分钟,请重新选择", "提示", 0);
                        return;
                    }
                }
            }
            //判断座位数充足
            for (var i = 0; i < seatNums.length ; i++) {
                if (passengerNum > seatNums[i]) {
                    myAlert("第" + (i + 1) + "个航段的所选航班\舱位的剩余座位数不足,请重新选择");
                    return;
                }
            }

            //提交请求
            var layerIndex = layer.load();
            $.post("/PNR/PNRQuery/AddSegment",
                {
                    flightCabinIDs: flightCabinIDs,
                    PNRID: PNRID,
                    flightList: flightList
                }, function (jsonData) {
                    layer.close(layerIndex);
                    myAlert(jsonData.Text);
                    if (jsonData.State) {
                        //清除添加航段的相关数据
                        sessionStorage.removeItem("addSegment");

                        window.location.href = "/PNR/PNRQuery/PnrInfoShow?PNRID=" + PNRID;
                    }
                }
            );
        });  

        //================ET更改航班按钮点击事件=====
        $("#divAddET").click(function () {
            var flightCabinID = 0;//存放用户选择的航班舱位ID (后续可以根据航班舱位ID查询出用户选择的航班 舱位等信息)
            var seatNums = 0;//存放用户选择的航班舱位剩余座位数(为了数据验证)
            var checkedCabins = $('input[name="cabin0"]:checked');//获取勾选的input标签，和里面的所有被保存的数据

            if (checkedCabins.length < 1) {
                myAlert("请选择航班和舱位");
                return;
            }
            flightCabinID = checkedCabins.eq(0).data("flight-cabin-id")//获取到保存在input标签里属性值flight-cabin-id的data数据
            seatNums = checkedCabins.eq(0).data("seat-num");
            if (seatNums < 1) {
                myAlert("所选航班舱位已无剩余座位，请重新选择！");
                return;
            }
            //获取更改原因
            var strChangeReason = $("#changeReason").val();
            if (changeData.voluntaryType == 2 && strChangeReason == "") {
                myAlert("目前为非自愿更改航班，请填写更改原因！")
                return;
            }

            //提交请求打开加载层
            var layerIndex = layer.load();
            $.post("/ElectronicsTicket/TicketModify/doChangeFlight", {
                flightCabinID: flightCabinID,//航班舱位ID
                PNRID: changeData.PNRID,//PNRID
                PNRSegmentID: changeData.PNRSegmentID,//原航段ID
                eTicketID: changeData.eTicketID,//电子客票ID
                PNRTicketingID: changeData.PNRTicketingID,//出票组ID
                voluntaryType: changeData.voluntaryType,//是否自愿
                strChangeReason: strChangeReason//更改原因
            }, function (msg) {
                layer.close(layerIndex);//关闭加载层
                myAlert(msg.Text);
                if (msg.State) {
                    sessionStorage.removeItem("ETChangeFlight");
                    window.location.href = "/ElectronicsTicket/TicketModify/showTicketInfor?eTicketID=" + changeData.eTicketID;
                }
            })
        });

        //将航班时间和日期拼接，用于后续多航段时间判断
        function timeObjToDateTimeStr(flightDate, timeStart, timeEnd) {
            var startDate = new Date(flightDate);
            var endDate = new Date(flightDate);
            //判断降落时间是否是第二天,如果是+1天
            if (timeEnd.Ticks < timeStart.Ticks) {
                endDate.setDate(endDate.getDate() + 1);
            }
            //转为将日期和时间转为字符串
            var strStart = startDate.getFullYear() + "-" + startDate.getMonth() + "-" + startDate.getDate() +
                " " + timeStart.Hours + ":" + timeStart.Minutes;
            var strEnd = endDate.getFullYear() + "-" + endDate.getMonth() + "-" + endDate.getDate() +
                " " + timeEnd.Hours + ":" + timeEnd.Minutes;

            return strStart + ";" + strEnd;
        }

        $("#divRetun").click(function () {
            window.location.href = "/PNR/PNRAppointment/Index";
        });
    </script>
</body>
</html>
